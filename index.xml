<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jackiossy &#39;s blog</title>
    <link>http://jackiossy.top/</link>
    <description>Recent content on Jackiossy &#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 07 Oct 2023 14:33:56 +0800</lastBuildDate><atom:link href="http://jackiossy.top/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[WWDC2023]Swift 5.9 新功能</title>
      <link>http://jackiossy.top/posts/swift5.9_new_func/</link>
      <pubDate>Sat, 07 Oct 2023 14:33:56 +0800</pubDate>
      
      <guid>http://jackiossy.top/posts/swift5.9_new_func/</guid>
      <description>Swift.org/swift-evolution 布告栏
1.代码整理新方式：允许将if / else 和 switch 语句用作表达式
if / else 可使用更可阅读的方式来表达
let bullet = if isRoot &amp;amp;&amp;amp; (count == 0 || !willExpand) {&amp;#34;&amp;#34;} else if count == 0 {&amp;#34;- &amp;#34;} else if maxDepth &amp;lt;= 0 {&amp;#34;&amp;gt;&amp;#34;} else {&amp;#34;V&amp;#34;} 2.结果构造器 Result builders 显著改进
诊断器识别错误更加的精准。
3.泛型。
类型参数聚合
&amp;lt;each Result&amp;gt;	func evaluate&amp;lt;each Result&amp;gt;(_: repeat Request&amp;lt;each Result&amp;gt;) -&amp;gt; (repeat each Result) 可以处理所有参数长度， 没有人为限制。
4.Swift宏 （ swift macros）</description>
    </item>
    
    <item>
      <title>Docker部署CUPS打印服务</title>
      <link>http://jackiossy.top/posts/docker%E9%83%A8%E7%BD%B2cups%E6%89%93%E5%8D%B0%E6%9C%8D%E5%8A%A1-%E4%BD%BF%E4%BC%A0%E7%BB%9F%E6%89%93%E5%8D%B0%E6%9C%BA%E6%94%AF%E6%8C%81airprint/</link>
      <pubDate>Sat, 07 Oct 2023 14:33:56 +0800</pubDate>
      
      <guid>http://jackiossy.top/posts/docker%E9%83%A8%E7%BD%B2cups%E6%89%93%E5%8D%B0%E6%9C%8D%E5%8A%A1-%E4%BD%BF%E4%BC%A0%E7%BB%9F%E6%89%93%E5%8D%B0%E6%9C%BA%E6%94%AF%E6%8C%81airprint/</guid>
      <description>Docker部署CUPS打印服务， 使传统打印机支持AirPrint 在iOS / macOS / iPadOS 当中， 我们在任意分享页面经常可以看到“打印”，如果我们有支持AirPrint功能的打印机的时候，当打印机连接在和设备的同一局域网下面的时候， 我们就可以在打印当中发现AirPrint打印机，并快速 便捷的使用打印功能。但是，我们并不是所有的打印机都支持AirPrint功能， 而且支持AirPrint功能都比较昂贵，那么我们如何才能将传统的USB打印机通过一些技术手段，将USB打印机变为AirPrint打印机呢？
前期准备工作：
Docker （ 任何运行方式都可以， 比如软路由，群晖，Ubuntu&amp;hellip; everything ) 一台USB打印机 任何品牌 打印机的Linux驱动 （ 官网下载， 如果CUPS默认自带打印机驱动可不用额外准备 ） 具体方案如下:
1.docker 部署CUPS服务
sudo docker run -d --name=airprint --net=&amp;#34;host&amp;#34; --privileged=true -e TZ=&amp;#34;Asia/Shanghai&amp;#34; -e HOST_OS=“Ubuntu” -p &amp;#39;631:631&amp;#39; -v &amp;#34;/volume1/docker/airprint/config&amp;#34;:&amp;#34;/config&amp;#34; -v /dev:/dev -v &amp;#34;/volume1/docker/airprint/avahi&amp;#34;:&amp;#34;/etc/avahi/services&amp;#34; \-v /var/run/dbus:/var/run/dbus &amp;#34;olbat/cupsd&amp;#34; 2.执行完毕后运行。
cupsd启动之后打开浏览器访问cups服务的web管理页面， 并点击顶部菜单&amp;quot;Administration&amp;quot;, 点击 Printers 分类中的 &amp;ldquo;Add Print&amp;rdquo; 按钮，然后输入默认的账号 print , 密码 print ，登陆之后你就会看到USB连接到这台docker设备上的打印机型号， 我这里的打印机是佳能的激光打印机 Canon LBP6018L , 这里我们发现Local Printers已经识别出来 &amp;ldquo;Canon LBP6030/6040/6018L&amp;quot;打印机了， 我们选择，然后点击continue 继续。</description>
    </item>
    
    <item>
      <title>在SwiftUI中常见的英语单词</title>
      <link>http://jackiossy.top/posts/english_words_about_swiftui/</link>
      <pubDate>Sat, 07 Oct 2023 14:33:56 +0800</pubDate>
      
      <guid>http://jackiossy.top/posts/english_words_about_swiftui/</guid>
      <description> foreground color 前景色 bold 粗体 opacity 不透明 radius 半径 infinity 距离无限 alignment 一致 leading 左对齐 spacing 间隔，行距 padding 内边距 ignores Safe Area ， 忽略安全区域 overlay 覆在……上面 stroke 一笔，一划 Rounded Rectangle 圆角矩形 </description>
    </item>
    
    <item>
      <title>如何自己手动编译openWRT on ubuntu server</title>
      <link>http://jackiossy.top/posts/how_to_build_openwrt/</link>
      <pubDate>Sat, 07 Oct 2023 14:33:56 +0800</pubDate>
      
      <guid>http://jackiossy.top/posts/how_to_build_openwrt/</guid>
      <description>如何自己手动编译openWRT on ubuntu server 1.前期准备 ubuntu linux server 魔法上网环境 （ 中国大陆用户 ） 脑子 🧠 双手 👋 2.前往Lean 仓库克隆代码 点击 Lean Openwrt仓库地址进入该项目首页， 为接下来的编译提供参考。
sudo apt update -y sudo apt full-upgrade -y sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \ bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \ git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \ libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \ mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.</description>
    </item>
    
  </channel>
</rss>
